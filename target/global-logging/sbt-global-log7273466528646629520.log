[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Deshawn\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Deshawn\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Oracle Corporation Java 19.0.1)
[debug]       Load.loadUnit: plugins took 275.0102ms
[debug]       Load.loadUnit: defsScala took 0.2493ms
[debug] [Loading] Scanning directory C:\Users\Deshawn\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Deshawn\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 18.7417 ms
[debug]           Load.resolveProject(global-plugins) took 63.9539ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Deshawn\.sbt\1.0\plugins, plugins: List(<none>))) took 170.4706ms
[debug] [Loading] Done in C:\Users\Deshawn\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 193.8953ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2802ms
[debug]     Load.loadUnit(file:/C:/Users/Deshawn/.sbt/1.0/plugins/, ...) took 583.1105ms
[debug]   Load.apply: load took 1734.7384ms
[debug]   Load.apply: resolveProjects took 14.0082ms
[debug]   Load.apply: finalTransforms took 89.7563ms
[debug]   Load.apply: config.delegates took 10.723ms
[debug]   Load.apply: Def.make(settings)... took 927.5338ms
[debug]   Load.apply: structureIndex took 200.7854ms
[debug]   Load.apply: mkStreams took 2.2643ms
[info] loading global plugins from C:\Users\Deshawn\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 16391.0236ms
[debug]           Load.loadUnit: plugins took 103.1823ms
[debug]           Load.loadUnit: defsScala took 0.0084ms
[debug] [Loading] Scanning directory C:\Users\Deshawn\Projekte\Scalaprojects\AdventOfcode\project
[debug]             Load.loadUnit: mkEval took 34.0932ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Deshawn\Projekte\Scalaprojects\AdventOfcode\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.3589 ms
[info] loading settings for project adventofcode-build from idea.sbt ...
[debug]               Load.resolveProject(adventofcode-build) took 3.4348ms
[debug]             Load.loadTransitive: finalizeProject(Project(id adventofcode-build, base: C:\Users\Deshawn\Projekte\Scalaprojects\AdventOfcode\project, plugins: List(<none>))) took 7.4634ms
[debug] [Loading] Done in C:\Users\Deshawn\Projekte\Scalaprojects\AdventOfcode\project, returning: (adventofcode-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 5500.8625ms
[debug]           Load.loadUnit: cleanEvalClasses took 28.7433ms
[debug]         Load.loadUnit(file:/C:/Users/Deshawn/Projekte/Scalaprojects/AdventOfcode/project/, ...) took 5634.5465ms
[debug]       Load.apply: load took 5636.7226ms
[debug]       Load.apply: resolveProjects took 0.2475ms
[debug]       Load.apply: finalTransforms took 17.7825ms
[debug]       Load.apply: config.delegates took 0.4523ms
[debug]       Load.apply: Def.make(settings)... took 138.0139ms
[debug]       Load.apply: structureIndex took 47.304ms
[debug]       Load.apply: mkStreams took 0.0046ms
[info] loading project definition from C:\Users\Deshawn\Projekte\Scalaprojects\AdventOfcode\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 15403.6959ms
[debug]     Load.loadUnit: defsScala took 0.0029ms
[debug] [Loading] Scanning directory C:\Users\Deshawn\Projekte\Scalaprojects\AdventOfcode
[debug]       Load.loadUnit: mkEval took 0.4248ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.2682 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 55.82ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\Deshawn\Projekte\Scalaprojects\AdventOfcode, plugins: List(<none>))) took 65.2365ms
[debug] [Loading] Done in C:\Users\Deshawn\Projekte\Scalaprojects\AdventOfcode, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2723.9351ms
[debug]     Load.loadUnit: cleanEvalClasses took 59.5182ms
[debug]   Load.loadUnit(file:/C:/Users/Deshawn/Projekte/Scalaprojects/AdventOfcode/, ...) took 18188.7063ms
[debug] Load.apply: load took 18191.4228ms
[debug] Load.apply: resolveProjects took 0.1665ms
[debug] Load.apply: finalTransforms took 56.4175ms
[debug] Load.apply: config.delegates took 0.5355ms
[debug] Load.apply: Def.make(settings)... took 132.8333ms
[debug] Load.apply: structureIndex took 43.811ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to AdventOfcode (in build file:/C:/Users/Deshawn/Projekte/Scalaprojects/AdventOfcode/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51296 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51296, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to AdventOfcode (in build file:/C:/Users/Deshawn/Projekte/Scalaprojects/AdventOfcode/)
[debug] > Exec(idea-shell, None, None)
